// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// An acceptable value for p.
//
// To make sure the checks on q are being tested, this value is specifically
// chosen to be far enough away from the "bad" values of q that they wouldn't
// be rejected on that basis.
//
// Python script for generating p (using PyCryptoDome's Crypto.Util.number
// package for the primality check):
// while True:
//   p = random.randrange(lower_bound, 1 << 1024)
//   p |= 3
//   if abs(p - too_small) < (1 << 924):
//     continue
//   if abs(p - not_relprime) < (1 << 924):
//     continue
//   if abs(p - not_prime) < (1 << 924):
//     continue
//   if math.gcd(p-1, 65537) != 1:
//     continue
//   if number.isPrime(p):
//     break

// An acceptable value for q.
//
// Python script for generating q (using PyCryptoDome's Crypto.Util.number
// package for the primality check):
// while True:
//   q = random.randrange(lower_bound, 1 << 1024)
//   q |= 3
//   if abs(p - q) < (1 << 924):
//     continue
//   if math.gcd(q-1, 65537) != 1:
//     continue
//   if number.isPrime(q):
//     break

{
  "entrypoint": "main",
  "input": {
    "dmem": {
      "rsa_p": "0xd10b3338d7d2cca85be7b76c5497f2fe89a9f9b73e613262565636dbc5901c386b1df3c7b8eb3ac8548a9062a5958b33c84dfe0fa9e2c61250d75683be1585008f926d5cfc4d3a3f003746a3beefcc71d287133768fc0268e1f84cb791be8e6dfc48b706ee0515089ff618c0a648854d6a93e9a0452552e93720ffa2021fd53b",
      "rsa_q": "0xf83da3592c89b3b8972d1a8dd1de78d7b64a0b1cce4a54ca5125bfc16105ce43ebe4bc6b5e0088e37281d264d2081cf1097671eb3299e91a6c571e4b71cdd1144ca96ad7c45bd05e8e25e371ca8e2043cf73a30ba5e9c979f259bbc9476c1ab3693136e403ebe4e47542c7a6f4164d1a7e2938e65191c9aee6a3534a87c3f1ff"
    }
  }
  "output": {
    "regs": {
      "w24": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
    }
  }
}
